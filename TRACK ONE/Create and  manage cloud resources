CHALLENGE LAB:

<----TASK 1:Create a project jumphost instance---->

Step 1: Open the Google Cloud Console
Step 2: Enter through the given credentials
Step 3: Click on Navigation bar-> Compute Engine-> VM intances
Step 4: Click on create new instance
Step 5: Enter these -
Name:nucleus-jumphost
Region: us-east1 (South Carolina)
Zone:us-east1-b
Series: N1
Machine-type:f1-micro
Boot disk image: Debian GNU/Linux 10 (buster)
Firewalls: Allow HTTP traffic
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<----TASK 2: Create a Kubernetes Service Cluster---->

gcloud container clusters create nucleus-backend \
          --num-nodes 1 \
          --network nucleus-vpc \
          --region us-east1
gcloud container clusters get-credentials nucleus-backend \
          --region us-east1

kubectl create deployment hello-server \
          --image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment hello-server \
          --type=LoadBalancer \
          --port 8080
          
           OR
           
gcloud config set compute/zone us-east1-b
gcloud container clusters create nucleus-backend
gcloud container clusters get-credentials nucleus-backend
kubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:2.0
kubectl expose deployment hello-server --type=LoadBalancer --port 8080
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<----TASK 3: Setup an HTTP load balancer---->

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

Create HTTP load balancer-

gcloud compute instance-templates create lb-backend-template \
   --region=us-east1 \
   --network=default \
   --subnet=default \
   --tags=allow-health-check \
   --image-family=debian-9 \
   --image-project=debian-cloud \
   --metadata=startup-script='#! /bin/bash
     apt-get update
     apt-get install apache2 -y
     a2ensite default-ssl
     a2enmod ssl
     vm_hostname="$(curl -H "Metadata-Flavor:Google" \
     http://169.254.169.254/computeMetadata/v1/instance/name)"
     echo "Page served from: $vm_hostname" | \
     tee /var/www/html/index.html
     systemctl restart apache2'
     
;;;;;;gcloud compute instance-groups managed create lb-backend-group \
   --template=lb-backend-template --size=2 --zone=us-east1-b ;;;;;(this part is not used)
   
   gcloud compute instance-templates create web-server-template \
>           --metadata-from-file startup-script=startup.sh \
>           --network nucleus-vpc \
>           --machine-type g1-small \
>           --region us-east1

gcloud compute instance-groups managed create web-server-group \
>           --base-instance-name web-server \
>           --size 2 \
>           --template web-server-template \
>           --region us-east1
   
gcloud compute firewall-rules create fw-allow-health-check \
    --network=default \
    --action=allow \
    --direction=ingress \
    --source-ranges=130.211.0.0/22,35.191.0.0/16 \
    --target-tags=allow-health-check \
    --rules=tcp:80
    
gcloud compute addresses create lb-ipv4-1 \
    --ip-version=IPV4 \
    --global
gcloud compute addresses describe lb-ipv4-1 \
    --format="get(address)" \
    --global
gcloud compute health-checks create http http-basic-check \
        --port 80

gcloud compute instance-groups managed \
>           set-named-ports web-server-group \
>           --named-ports http:80 \
>           --region us-east1

gcloud compute backend-services create web-server-backend \
>           --protocol HTTP \
>           --http-health-checks http-basic-check \
>           --global

gcloud compute backend-services add-backend web-server-backend \
>           --instance-group web-server-group \
>           --instance-group-region us-east1 \
>           --global

gcloud compute url-maps create web-server-map \
>           --default-service web-server-backend

gcloud compute target-http-proxies create http-lb-proxy \
>           --url-map web-server-map

gcloud compute forwarding-rules create http-content-rule \
>         --global \
>         --target-http-proxy http-lb-proxy \
>         --ports 80

gcloud compute forwarding-rules

or

gcloud compute instance-templates create web-server-template \
          --metadata-from-file startup-script=startup.sh \
          --network nucleus-vpc \
          --machine-type g1-small \
          --region us-east1


gcloud compute instance-groups managed create web-server-group \
          --base-instance-name web-server \
          --size 2 \
          --template web-server-template \
          --region us-east1


gcloud compute firewall-rules create web-server-firewall \
          --allow tcp:80 \
          --network nucleus-vpc
gcloud compute http-health-checks create http-basic-check
gcloud compute instance-groups managed \
          set-named-ports web-server-group \
          --named-ports http:80 \
          --region us-east1


gcloud compute backend-services create web-server-backend \
          --protocol HTTP \
          --http-health-checks http-basic-check \
          --global
gcloud compute backend-services add-backend web-server-backend \
          --instance-group web-server-group \
          --instance-group-region us-east1 \
          --global


gcloud compute url-maps create web-server-map \
          --default-service web-server-backend
gcloud compute target-http-proxies create http-lb-proxy \
          --url-map web-server-map


gcloud compute forwarding-rules create http-content-rule \
        --global \
        --target-http-proxy http-lb-proxy \
        --ports 80
gcloud compute forwarding-rules list
