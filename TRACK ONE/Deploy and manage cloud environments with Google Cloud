Task 1: Create the production environment
Navigation Menu ->Compute engine ->VM instances
Click on SSH to kraken-jumphost
Then execute these commands in the SSH:

cd /work/dm
sed -i s/SET_REGION/us-east1/g prod-network.yaml

gcloud deployment-manager deployments create prod-network --config=prod-network.yaml

gcloud config set compute/zone us-east1-b

gcloud container clusters create kraken-prod \
          --num-nodes 2 \
          --network kraken-prod-vpc \
          --subnetwork kraken-prod-subnet\
          --zone us-east1-b

gcloud container clusters get-credentials kraken-prod

cd /work/k8s

for F in $(ls *.yaml); do kubectl create -f $F; done

// wait sometime, if the task doesnt get completed then execute the last 3 commands again one by one.
wait sometime assessment will get completed.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Task 2: Setup the Admin instance
Still in kraken-jumphost's SSH -> Run
gcloud config set compute/zone us-east1-b

gcloud compute instances create kraken-admin --network-interface="subnet=kraken-mgmt-subnet" --network-interface="subnet=kraken-prod-subnet"

Then go to-
Monitoring-> Alerting-> Create alerting policy
then enter these details
   Resource Type : VM Instance
   Metric : CPU utilization
   Filter : instance_name
            Value : kraken-admin
   Condition : is above
   Threshold : 50%
   For : 1 minute
who should be notifies-> manage notification channels-> Add your email and give a Display Name
Go back to the Creating Alerting Policy Tab, refresh the notification and select the display name you created now.
Give any alert name
Click Save
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Task 3: Verify the Spinnaker deployment
Open cloud shell:
gcloud config set compute/zone us-east1-b

gcloud container clusters get-credentials spinnaker-tutorial

DECK_POD=$(kubectl get pods --namespace default -l "cluster=spin-deck" -o jsonpath="{.items[0].metadata.name}")

kubectl port-forward --namespace default $DECK_POD 8080:9000 >> /dev/null &

Go to cloudshell webpreview(click on the button right next to settigs button of cloud shell)-> Preview on port 8080

Go to applications -> sample

Open pipelines and manually run the pipeline if it has not already running.

Approve the deployment to production(hover over the yellow colour person icon).

Check the production frontend endpoint (use http, not the default https)

Now in Cloud shell run these commands:
gcloud config set compute/zone us-east1-b

gcloud source repos clone sample-app

cd sample-app
touch a

git config --global user.email "$(gcloud config get-value account)"
git config --global user.name "Student"
git commit -a -m "change"
git tag v1.0.1
git push --tags


OR

The lab manual suggests you use Cloud Shell and kubectl to port forward the spin-deck pod from port 9000 to 8080, while I perform to work around with the Cloud Console using the following steps.

In the Console, click on Navigation menu > Kubernetes Engine > ServiceS & Ingress

Search spin-deck.
Click Port Forward at the end of the detail page.
Clone your source code repository
In the Console, click on Navigation menu > Source Repositories.

Click sample-app.

Click Clone at the top of the repository, and copy the git clone command to the Cloud Shell.

cd sample-app
git config --global user.email "$(gcloud config get-value core/account)"
git config --global user.name "$(gcloud config get-value core/account)"

Triggering your pipeline from code changes
From your sample-app directory, change the color of the app from orange to blue:

sed -i 's/orange/blue/g' cmd/gke-info/common-service.go
Tag your change and push it to the source code repository:

git commit -a -m "Change color to blue"
git tag v1.0.1
git push --tags
